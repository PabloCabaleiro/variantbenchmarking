/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: "BCFTOOLS_NORM" {
        ext.prefix = { vcf.baseName - ".vcf" + ".norm"}
        ext.args   = {"--output-type z -m-any -c w" }
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
    withName: "VARIANT_EXTRACTOR" {
        ext.prefix = { input.baseName - ".vcf" }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess"},
            pattern: "*{.vcf.gz}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "BCFTOOLS_DEDUP" {
        ext.prefix = { vcf.baseName - ".vcf" + ".dedup"}
        ext.args   = {"--output-type z --rm-du exact -c w" }
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
    withName: "BCFTOOLS_SORT" {
        ext.prefix = { vcf.baseName - ".vcf" + ".sort"}
        ext.args   = {"--output-type z" }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess"},
            pattern: "*{.vcf.gz}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "BCFTOOLS_REHEADER_TRUTH" {
        ext.args2   = {"--output-type v" }
        ext.prefix = {"${meta.id}_truth"}
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
    withName: "BCFTOOLS_REHEADER_TEST" {
        ext.args2   = {"--output-type v" }
        ext.prefix = {"${meta.id}_query"}
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
    withName: "BCFTOOLS_REHEADER" {
        beforeScript = { "echo ${meta.id}.${meta.caller} > ${meta.id}.txt" }
        ext.args   = { "--samples ${meta.id}.txt" }
        ext.args2   = {"--output-type z" }
        ext.prefix = { vcf.baseName - ".vcf" + ".rh"}
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }

    withName: BCFTOOLS_VIEW_CONTIGS {
        ext.prefix = { vcf.baseName - ".vcf" + ".snv"  }
        ext.args  = {[
                "--output-type v",
                (params.genome.contains("38"))? "-r chr1,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chr10,chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,chr22,chrX,chrY" : "-r 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y"
        ].join(' ').trim() }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BCFTOOLS_VIEW_SNV {
        ext.prefix = { vcf.baseName - ".vcf" + ".snv" }
        ext.args  = {"--output-type v --types snps" }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BCFTOOLS_VIEW_INDEL {
        ext.prefix = { vcf.baseName - ".vcf" + ".indel" }
        ext.args  = {"--output-type v --types indels" }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: SURVIVOR_STATS {
        ext.prefix ={["${meta.id}.${meta.vartype}",
                    (meta.caller != null)      ? ".${meta.caller}" : ''
                    ].join('').trim()
                    }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/stats/survivor/"},
            pattern: "*{.stats}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BCFTOOLS_FILTER {
        ext.prefix = { vcf.baseName - ".vcf" + ".filter"}
        ext.args   = {"--output-type v --$params.variant_filtering '$params.expression'" }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess/"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: SURVIVOR_FILTER {
        ext.prefix = { vcf_file.baseName - ".vcf" + ".filter"}
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess"},
            pattern: "*{.vcf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BCFTOOLS_STATS {
        ext.prefix ={["${meta.id}.${meta.vartype}",
                    (meta.caller != null)      ? ".${meta.caller}" : ''
                    ].join('').trim()
                    }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/stats/bcftools/"},
            pattern: "*{stats.txt}",
            mode: params.publish_dir_mode
        ]
    }
    // BENCHMARK TOOLS
    withName: "RTGTOOLS_FORMAT" {
        ext.when   = { params.method.split(',').contains('rtgtools') && !params.sdf }
        publishDir = [
            path: {"${params.outdir}/rtgtools/sdf"},
            pattern: "*{.sdf}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "RTGTOOLS_VCFEVAL" {
        ext.prefix = {"${meta.id}.${params.sample}.${meta.vartype}.${meta.caller}"}
        //ext.args   = {"--ref-overlap --all-record --output-mode ga4gh"}
        ext.when   = { params.method.split(',').contains('rtgtools') }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/rtgtools_bench"},
            pattern: "*{.vcf.gz,vcf.gz.tbi,tsv.gz,txt}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "HAPPY_HAPPY" {
        ext.prefix = {"${meta.id}.${params.sample}.${meta.vartype}.${meta.caller}"}
        //ext.args   = {""}
        publishDir = [
            path: {"${params.outdir}/${meta.id}/happy_bench"},
            pattern: "*{.csv.gz,csv,json.gz,json,vcf.gz,vcf.gz.tbi}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "HAPPY_SOMPY" {
        ext.prefix = {"${meta.id}.${params.sample}.${meta.vartype}.${meta.caller}"}
        ext.args = { meta.id.contains("strelka") || meta.id.contains("varscan") || meta.id.contains("pisces") ? "--feature-table hcc.${meta.id}.${meta.vartype} --bin-afs" : "--feature-table generic" }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/sompy_bench"},
            pattern: "*{.csv.gz,csv,json.gz,json,vcf.gz,vcf.gz.tbi,csv}",
            mode: params.publish_dir_mode
        ]
    }

    withName: "HAPPY_PREPY" {
        ext.prefix = {"${meta.id}.${params.sample}.${meta.vartype}.${meta.caller}"}
        ext.args   = {"--fixchr --filter-nonref --bcftools-norm"}
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess"},
            pattern: "*{vcf.gz}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "TRUVARI_BENCH" {
        ext.prefix = {"${meta.id}.${params.sample}.${meta.vartype}.${meta.caller}"}
        ext.args = {[
                "--sizemin 0 --sizefilt 0 --sizemax 5000000",
                (meta.pctseq != null)      ? "--pctsize ${meta.pctsize}" : '',
                (meta.pctovl != null)       ? "--pctovl ${meta.pctovl}" : '',
                (meta.pctseq != null)       ? "--pctseq ${meta.pctseq}" : '',
                (meta.refdist != null)      ? "--refdist ${meta.refdist}" : '',
                (meta.chunksize != null)    ? "--chunksize ${meta.chunksize}" : '',
                (meta.dup_to_ins)   ? "--dup-to-ins" : '',
                (meta.typeignore)   ? "--typeignore" : ''
                ].join(' ').trim()}
        ext.when   = { params.method.split(',').contains('truvari') }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/truvari_bench"},
            pattern: "*{.vcf.gz,vcf.gz.tbi,json}",
            mode: params.publish_dir_mode
        ]
    }
    withName: SVANALYZER_SVBENCHMARK {
        ext.prefix = {"${meta.id}.${params.sample}.${meta.vartype}.${meta.caller}"}
        ext.args = {[
                (meta.normshift != null)      ? "-normshift ${meta.normshift}" : '',
                (meta.normdist != null)       ? "-normdist ${meta.normdist}" : '',
                (meta.normsizediff != null)   ? "-normsizediff ${meta.normsizediff}" : '',
                (meta.maxdist != null)        ? "-maxdist ${meta.maxdist}" : ''
                ].join(' ').trim()}
        ext.when   = { params.method.split(',').contains('svanalyzer') }
        publishDir = [
            path: {"${params.outdir}/${meta.id}/svanalyzer_bench"},
            pattern: "*{.vcf.gz,tbi,distances,log,report}",
            mode: params.publish_dir_mode
        ]
    }
    withName: WITTYER {
        ext.prefix = {"${meta.id}.${params.sample}.${meta.vartype}.${meta.caller}"}
        ext.args = {[
                "--includedFilters=''",
                (meta.evaluationmode != null)      ? "-em ${meta.evaluationmode}" : '',
                (meta.percentThreshold != null)    ? "--pt ${meta.percentThreshold}" : '',
                (meta.absoluteThreshold != null)   ? "--at ${meta.absoluteThreshold}" : '',
                (meta.bpDistance != null)          ? "--bpd ${meta.bpDistance}" : '',
                (meta.maxMatches != null)          ? "--mm ${meta.maxMatches}" : ''
                ].join(' ').trim()}
        publishDir = [
            path: {"${params.outdir}/${meta.id}/wittyer_bench"},
            pattern: "*{.vcf.gz,tbi,json}",
            mode: params.publish_dir_mode
        ]
    }
    withName: BAMSURGEON_EVALUATOR {
        ext.prefix = {"${meta.id}.${params.sample}.${meta.vartype}"}
        publishDir = [
            path: {"${params.outdir}/${meta.id}/bamsurgeon_evalator"},
            pattern: "*{.vcf,stats}",
            mode: params.publish_dir_mode
        ]
    }
    withName: SVYNC {
        ext.prefix = {"${meta.id}.${meta.vartype}.${meta.caller}"}
        publishDir = [
            path: {"${params.outdir}/${meta.id}/preprocess"},
            pattern: "*{.vcf.gz,vcf.gz.tbi}",
            mode: params.publish_dir_mode
        ]
    }
    withName: MERGE_REPORTS {
        ext.prefix = {"${meta.benchmark_tool}.${meta.vartype}"}
        publishDir = [
            path: {"${params.outdir}/summary/tables"},
            pattern: "*{csv}",
            mode: params.publish_dir_mode
        ]
    }
    withName: PLOTS {
        ext.prefix = {"${meta.benchmark_tool}.${meta.vartype}"}
        publishDir = [
            path: {"${params.outdir}/summary/plots"},
            pattern: "*{png}",
            mode: params.publish_dir_mode
        ]
    }
    withName: "TABIX_BGZIP*"{
        ext.prefix = {input.toString() - ".vcf.gz"}
    }
    withName: SURVIVOR_MERGE {
        ext.prefix = {"${meta.id}.${meta.vartype}.${meta.tag}"}
    }
    withName: BCFTOOLS_MERGE {
        ext.prefix = {"${meta.id}.${meta.vartype}.${meta.tag}"}
        ext.args   = {"--output-type v --force-samples"}
    }
    withName: VCF_TO_CSV {
        ext.prefix = {"${meta.id}.${meta.vartype}.${meta.tag}"}
        publishDir = [
            path: {"${params.outdir}/summary/comparisons"},
            pattern: "*{.csv}",
            mode: params.publish_dir_mode
        ]
    }
}
//
// Don't publish results for these processes
//
process {
    withName: 'TABIX_TABIX|TABIX_BGZIP|TABIX_BGZIPTABIX|BGZIP_TABIX|SURVIVOR_MERGE|BCFTOOLS_MERGE' {
        publishDir = [
            path: { "${params.outdir}/test" },
            enabled: false
        ]
    }
}
