nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "PIPELINE"

    test("Run with profile test") {

        when {
            params {
                input = 'assets/samplesheet_germline_hg38.csv'
                sample               = "HG002"
                input                = "assets/samplesheet_germline_hg38.csv"
                outdir               = "$outputDir"
                genome               = 'GRCh38'
                analysis             = 'germline'
                method               = 'happy,truvari,svanalyzer,wittyer,rtgtools'  //
                preprocess           = "normalization,deduplication,prepy"
                sv_standardization   = "svync,homogenize"
                include_expression   = 'FILTER="."'
                min_sv_size          = 30
                truth_small          = "https://raw.githubusercontent.com/kubranarci/benchmark_datasets/main/CRMG_benchmark_dataset/HG002_GRCh38_CMRG_smallvar_v1.00.vcf.gz"
                high_conf_small      = "https://raw.githubusercontent.com/kubranarci/benchmark_datasets/main/CRMG_benchmark_dataset/HG002_GRCh38_CMRG_smallvar_v1.00.bed"
                truth_sv             = "https://raw.githubusercontent.com/kubranarci/benchmark_datasets/main/SV_testdata/hg38/truth/HG002_GRCh38_difficult_medical_gene_SV_benchmark_v0.01.chr21.vcf.gz"
                high_conf_sv         = "https://raw.githubusercontent.com/kubranarci/benchmark_datasets/main/SV_testdata/hg38/truth/HG002_GRCh38_difficult_medical_gene_SV_benchmark_v01.ch21.bed"
                itruth_ignore        = true
            }
        }

        then {
            assert workflow.success

            assertAll(
                { assert new File("$outputDir/samplesheet/samplesheet.csv").readLines().size() == 15 },
                { assert new File("$outputDir/samplesheet/samplesheet.csv").readLines()*.split(',')[0].take(4) == ['"sample"', '"fastq_1"', '"fastq_2"', '"run_accession"'] },
                { assert new File("$outputDir/samplesheet/samplesheet.csv").readLines()*.split(',').collect { it[0] } == ['"sample"', '"DRX024467"', '"DRX026011"', '"ERX1234253"', '"SRX10940790"', '"SRX11047067"', '"SRX17709227"', '"SRX17709228"', '"SRX6725035"', '"SRX9315476"', '"SRX9504942"', '"SRX9504942"', '"SRX9504942"', '"SRX9504942"', '"SRX9626017"'] },
                { assert new File("$outputDir/samplesheet/samplesheet.csv").text.contains('Illumina HiSeq 2500') },
                { assert new File("$outputDir/fastq/DRX024467_DRR026872.fastq.gz").exists() },
                { assert new File("$outputDir/fastq/SRX10940790_SRR14593545_1.fastq.gz").exists() },
                { assert new File("$outputDir/pipeline_info/nf_core_fetchngs_software_mqc_versions.yml").exists() },
                { assert new File("$outputDir/samplesheet/id_mappings.csv").exists() },
                { assert new File("$outputDir/samplesheet/multiqc_config.yml").exists() },
                { assert new File("$outputDir/samplesheet/samplesheet.csv").exists() }
            )
        }
    }
}
